// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

public final class compteServeur_Stub
    extends java.rmi.server.RemoteStub
    implements compte, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_crediter1_0;
    private static java.lang.reflect.Method $method_debiter_1;
    private static java.lang.reflect.Method $method_lire_solde_2;
    
    static {
	try {
	    $method_crediter1_0 = compte.class.getMethod("crediter1", new java.lang.Class[] {double.class});
	    $method_debiter_1 = compte.class.getMethod("debiter", new java.lang.Class[] {double.class});
	    $method_lire_solde_2 = compte.class.getMethod("lire_solde", new java.lang.Class[] {});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public compteServeur_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of crediter1(double)
    public void crediter1(double $param_double_1)
	throws java.rmi.RemoteException, java.sql.SQLException
    {
	try {
	    ref.invoke(this, $method_crediter1_0, new java.lang.Object[] {new java.lang.Double($param_double_1)}, -8144628600675980249L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.sql.SQLException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of debiter(double)
    public void debiter(double $param_double_1)
	throws java.rmi.RemoteException, java.sql.SQLException
    {
	try {
	    ref.invoke(this, $method_debiter_1, new java.lang.Object[] {new java.lang.Double($param_double_1)}, -5749351718532718214L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.sql.SQLException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of lire_solde()
    public double lire_solde()
	throws java.rmi.RemoteException, java.sql.SQLException
    {
	try {
	    Object $result = ref.invoke(this, $method_lire_solde_2, null, 1112259359883777234L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.sql.SQLException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
